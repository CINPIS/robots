{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","registerServiceWorker.js","index.js"],"names":["Card","props","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","style","overflow","border","height","width","children","App","onSearchChange","event","setState","target","value","state","fetch","then","response","json","users","this","filterRobots","filter","robot","toLocaleLowerCase","includes","lenght","React","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.652aae89.chunk.js","sourcesContent":["import React from 'react'; //you're using react, because we're using JSX, not HTML.\r\nimport './card.css';\r\n\r\nconst Card = (props) => { //you can just return one element! \r\n    //the properties are the parameters as you're using object robots with different names\r\n    //template scripts for props and render the robot at src.\r\n    //destructuring: and you can destructure even more putting these names and props as a parameter above.\r\n    const { name, email, id } = props;\r\n    return (\r\n    <div className='bg-washed-green tc dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n        <img alt='robots' src={`https://robohash.org/${id}?200x200`} />  \r\n        <div>\r\n            <h2>{name}</h2>\r\n            <p>{email}</p>\r\n        </div>\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card'\r\n\r\nconst CardList = ({ robots }) => {\r\n   \r\n    return (\r\n    <div>\r\n        {\r\n            robots.map((user, i) => {\r\n                return <Card key={i} id={robots[i].id} name={robots[i].name} email={robots[i].email} />\r\n            })\r\n        }\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\n\r\nconst SearchBox = ( {searchfield, searchChange}) => {\r\n    return (\r\n        <div className=\"pa2\">\r\n            <input \r\n                className=\"pa3 ba b--green bg-lightest-blue\"\r\n                type='search' \r\n                placeholder='search robots' \r\n                onChange={searchChange} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{overflow: 'scroll', border: '10px groove gray', height: '800px', width: '100%'}}> \r\n            {props.children}\r\n        </div>\r\n        \r\n );\r\n};\r\n// to render what is inside: children! cardlist is its children. So it will render its children.\r\n// so we get props, the object, the children, which will have the cardlist. \r\n// { js expression.}\r\nexport default Scroll;\r\n","import React, { Component } from 'react';\r\nimport CardList from '../components/CardList';\r\n//import { robots } from './robots'; \r\nimport SearchBox from '../components/SearchBox';\r\nimport './App.css';\r\nimport { robots } from '../robots';\r\nimport Scroll from '../components/Scroll';\r\n\r\n\r\nclass App extends React.Component {\r\n    constructor(){\r\n        super()\r\n        this.state = {\r\n            robots: [],\r\n            searchfield: '' //empty string\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response => response.json())\r\n        .then(users => this.setState({ robots: users}));\r\n    }\r\n\r\n    onSearchChange = (event) => {\r\n        this.setState({ searchfield: event.target.value })\r\n        /*const filterRobots = this.state.robots.filter(robots => {\r\n            return robots.name.toLocaleLowerCase().includes(this.state.searchfield.toLocaleLowerCase());\r\n        })*///the value of this is not referring to the app. Because of the event in the input (searchB),\r\n        //the value of this is all the input, and the input doesnt have the state.robots.\r\n        \r\n        //console.log(event.target.value); //to know the difference when you type. \r\n        //we have the searchbox onchange to see an event that calls this function, the parent\r\n    }//everythime a change happen we get an event\r\n\r\n    render () {\r\n        const { robots, searchfield } = this.state;\r\n        const filterRobots = robots.filter(robot => {\r\n            return robot.name.toLocaleLowerCase().includes(searchfield.toLocaleLowerCase());\r\n        })\r\n        if (robots.lenght === 0) {//or !robots.lenght which would be false..\r\n            return <h1>Loading..</h1>\r\n        } else{\r\n        return(\r\n            <div className=\"tc\">\r\n                <h1 className=\"f1\">RoboFriends</h1>\r\n                <SearchBox searchChange={this.onSearchChange}/>\r\n                <Scroll>\r\n                    <CardList robots={filterRobots} />\r\n                </Scroll>\r\n            </div>\r\n            );\r\n        }\r\n    }\r\n} \r\n//search box must communicate with cardlist to search. In the one flow diagram, \r\n//one need to send information to the parent to tell the other what to do.\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom'; //react is a view library, the litlle react bot that does \n//the DOM Manipulation. React DOM is used for the DOM. It could be react native for mobile...\nimport './index.css'; //this is a new syntax: add css for each different component. \n//it will apply to each will render it. \n//import Card from './Card'; //if there is no .js or something, it assumes it is JavaScript.\nimport App from './containers/App';\nimport registerServiceWorker from './registerServiceWorker'; //allows to work feaster and offline\nimport 'tachyons';\nimport { robots } from './robots'; //as this is not default export in robots, it must be destructured\n//like { robot }. In other words, it has multiple exports.\n\nReactDOM.render(\n  <App  />, document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nregisterServiceWorker();\n"],"sourceRoot":""}